function solution(n) {
    const cache = new Array(n+1).fill(0);
    let count = 0;
    for(let i = 1; i<=n ; i++) cache[i] = cache[i-1] + i;
    for(let i = 1; i<=n ; i++){
        if(cache[i] > n) return count;
        if((n - cache[i]) % i === 0 ) count+= 1;
    }
    return 1;
}


// 16 
// 16 
// 8 9 = 17
// 7 8 = 15
// 16 -> 짝수 일 경우 한쪽이 홀수면 안됨 고로 p가 2인경우에는 생각할 수 없음
// 16 -> 

// n이 짝수인 경우에는 홀수 + 홀수, 짝수 + 짝수의 경우만 가능하다.


// 17 p의 갯수가 홀수일경우 홀수로 시작해야함

// 18 
// 8 + 9  (17 - 1)
// 5 + 6 + 7 
// 

// 1 2 3 => 6
// 2 3 4 => 9
// 3 
// 1 2 

// 1 2 3 4 10
// 2 3 4 5 14
// 3 4 5 6 18
// 4 5 6 7 22

// 2 => 3 ,  5,  7,  9
// 3 => 6 ,  9, 12, 15
// 4 => 10, 14, 18, 22
// 5 => 15, 20, 25, 30

// 12 % 2 === 0
// 9 % 3 === 0
// 
// 15  3? 6,
